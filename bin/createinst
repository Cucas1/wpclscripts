#!/bin/bash

# Caminho fixo para templates
TEMPLATES_DIR="/usr/local/share/wordpress-management"

# Solicitar informações ao usuário
read -p "Nome da instância: " INSTANCE_NAME
read -p "Domínio (ex.: exemplo.com): " DOMAIN
read -p "Usuário WordPress (admin): " WP_USER
read -p "Senha WordPress: " WP_PASS
read -p "Email do administrador: " WP_EMAIL
read -p "Deseja criar uma instância staging? (s/n): " STAGING_CHOICE

# Diretórios
BASE_DIR="/opt/wordpress"
INSTANCE_DIR="$BASE_DIR/$INSTANCE_NAME"
STAGING_DIR="$BASE_DIR/${INSTANCE_NAME}-staging"

# Verificar se a instância já existe
if [[ -d "$INSTANCE_DIR" ]]; then
  echo "Erro: Uma instância com este nome já existe."
  exit 1
fi

# Criar diretório para a instância
mkdir -p "$INSTANCE_DIR"

# Copiar templates para o diretório da instância
cp "$TEMPLATES_DIR/docker-compose.yml" "$INSTANCE_DIR/docker-compose.yml" || {
  echo "Erro ao copiar docker-compose.yml"; exit 1; }
cp "$TEMPLATES_DIR/dockerfile" "$INSTANCE_DIR/dockerfile" || {
  echo "Erro ao copiar Dockerfile"; exit 1; }
cp "$TEMPLATES_DIR/plugins.txt" "$INSTANCE_DIR/plugins.txt" || {
  echo "Erro ao copiar plugins.txt"; exit 1; }
cp "$TEMPLATES_DIR/setup-wordpress.sh" "$INSTANCE_DIR/setup-wordpress.sh" || {
  echo "Erro ao copiar setup-wordpress.sh"; exit 1; }
  
# Verificar se nginx.conf é um diretório ou não existe
if [[ -d "$INSTANCE_DIR/nginx.conf" ]]; then
  echo "O nginx.conf no diretório da instância principal é um diretório. Renomeando para nginx.d..."
  mv "$INSTANCE_DIR/nginx.conf" "$INSTANCE_DIR/nginx.d" || {
    echo "Erro ao renomear nginx.conf como diretório para nginx.d"; exit 1; }
fi

if [[ ! -f "$INSTANCE_DIR/nginx.conf" ]]; then
  # Criar arquivo nginx.conf para a instância principal
  cat > "$INSTANCE_DIR/nginx.conf" <<- 'EOL'
events {}

http {
    server {
        listen 80;
        server_name DOMAIN;

        location / {
            proxy_pass http://INSTANCE_NAME:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
EOL

echo "Arquivo nginx.conf criado com sucesso para a instância principal em $INSTANCE_DIR/nginx.conf"
fi

# Personalizar o docker-compose.yml
sed -i "s/INSTANCE_NAME/$INSTANCE_NAME/g" "$INSTANCE_DIR/docker-compose.yml"
sed -i "s/DOMAIN/$DOMAIN/g" "$INSTANCE_DIR/docker-compose.yml"
sed -i "s/wp_user/$WP_USER/g" "$INSTANCE_DIR/docker-compose.yml"
sed -i "s/wp_pass/$WP_PASS/g" "$INSTANCE_DIR/docker-compose.yml"
sed -i "s/admin/$WP_USER/g" "$INSTANCE_DIR/docker-compose.yml"
sed -i "s/admin_pass/$WP_PASS/g" "$INSTANCE_DIR/docker-compose.yml"
sed -i "s/admin@example.com/$WP_EMAIL/g" "$INSTANCE_DIR/docker-compose.yml"
sed -i "s/NGINX_PORT/8080/g" "$INSTANCE_DIR/docker-compose.yml"


# Construir e iniciar a instância
cd "$INSTANCE_DIR"
docker-compose build wordpress || { echo "Erro ao construir a imagem Docker."; exit 1; }
docker-compose up -d || { echo "Erro ao iniciar os contêineres."; exit 1; }

# Configurar SSL para produção
certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos -m "$WP_EMAIL" || {
  echo "Erro ao configurar SSL para o domínio $DOMAIN."
}

# Copiar e personalizar nginx.conf
cp "$TEMPLATES_DIR/nginx.conf" "$INSTANCE_DIR/nginx.conf" || {
  echo "Erro ao copiar nginx.conf"; exit 1; }
sed -i "s/DOMAIN/$DOMAIN/g" "$INSTANCE_DIR/nginx.conf"
sed -i "s/INSTANCE_NAME/wp_$INSTANCE_NAME/g" "$INSTANCE_DIR/nginx.conf"

# Configurar instância staging, se solicitado
if [[ "$STAGING_CHOICE" == "s" ]]; then
  mkdir -p "$STAGING_DIR"
  cp "$TEMPLATES_DIR/docker-compose.yml" "$STAGING_DIR/docker-compose.yml" || {
    echo "Erro ao copiar docker-compose.yml para staging"; exit 1; }
  cp "$TEMPLATES_DIR/dockerfile" "$STAGING_DIR/dockerfile" || {
    echo "Erro ao copiar Dockerfile para staging"; exit 1; }
  cp "$TEMPLATES_DIR/plugins.txt" "$STAGING_DIR/plugins.txt" || {
    echo "Erro ao copiar plugins.txt para staging"; exit 1; }
  cp "$TEMPLATES_DIR/setup-wordpress.sh" "$STAGING_DIR/setup-wordpress.sh" || {
    echo "Erro ao copiar setup-wordpress.sh para staging"; exit 1; }
  cp "$TEMPLATES_DIR/nginx.conf" "$STAGING_DIR/nginx.conf" || {
    echo "Erro ao copiar nginx.conf para staging"; exit 1; }

  # Verificar se nginx.conf é um diretório ou não existe no staging
  if [[ -d "$STAGING_DIR/nginx.conf" ]]; then
    echo "O nginx.conf no diretório da instância staging é um diretório. Renomeando para nginx.d..."
    mv "$STAGING_DIR/nginx.conf" "$STAGING_DIR/nginx.d" || {
      echo "Erro ao renomear nginx.conf como diretório para nginx.d na instância staging"; exit 1; }
  fi

  if [[ ! -f "$STAGING_DIR/nginx.conf" ]]; then
    cat > "$STAGING_DIR/nginx.conf" <<- 'EOL'
events {}

http {
    server {
        listen 80;
        server_name staging.$DOMAIN;

        location / {
            proxy_pass http://staging-$INSTANCE_NAME:80;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
    }
}
EOL
  fi

  # Substituir valores no nginx.conf de staging
  sed -i "s/DOMAIN/staging.$DOMAIN/g" "$STAGING_DIR/nginx.conf"
  sed -i "s/INSTANCE_NAME/wp_${INSTANCE_NAME}_staging/g" "$STAGING_DIR/nginx.conf"
  sed -i "s/NGINX_PORT/8081/g" "$STAGING_DIR/docker-compose.yml"

  # Ajustar permissões para setup-wordpress.sh
  chmod +x "$STAGING_DIR/setup-wordpress.sh" || {
    echo "Erro ao ajustar permissões do setup-wordpress.sh no staging"; exit 1; }

  cd "$STAGING_DIR"
  docker-compose build wordpress
  docker-compose up -d || { echo "Erro ao iniciar os contêineres de staging."; exit 1; }
  certbot --nginx -d "staging.$DOMAIN" --non-interactive --agree-tos -m "$WP_EMAIL" || {
    echo "Erro ao configurar SSL para staging.$DOMAIN."
  }

  echo "Instância staging criada com sucesso em staging.$DOMAIN."
fi

echo "Instância $INSTANCE_NAME criada com sucesso!"
